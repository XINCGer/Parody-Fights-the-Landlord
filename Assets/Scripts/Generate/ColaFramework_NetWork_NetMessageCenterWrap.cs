//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ColaFramework_NetWork_NetMessageCenterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ColaFramework.NetWork.NetMessageCenter), typeof(System.Object));
		L.RegFunction("SetPerFrameHandleCnt", SetPerFrameHandleCnt);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnMessage", get_OnMessage, set_OnMessage);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("TimeSinceUpdate", get_TimeSinceUpdate, set_TimeSinceUpdate);
		L.RegFunction("NetMessageAction", ColaFramework_NetWork_NetMessageCenter_NetMessageAction);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPerFrameHandleCnt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ColaFramework.NetWork.NetMessageCenter obj = (ColaFramework.NetWork.NetMessageCenter)ToLua.CheckObject<ColaFramework.NetWork.NetMessageCenter>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetPerFrameHandleCnt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnMessage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ColaFramework.NetWork.NetMessageCenter obj = (ColaFramework.NetWork.NetMessageCenter)o;
			ColaFramework.NetWork.NetMessageCenter.NetMessageAction ret = obj.OnMessage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnMessage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, ColaFramework.NetWork.NetMessageCenter.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TimeSinceUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ColaFramework.NetWork.NetMessageCenter obj = (ColaFramework.NetWork.NetMessageCenter)o;
			float ret = obj.TimeSinceUpdate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TimeSinceUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnMessage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ColaFramework.NetWork.NetMessageCenter obj = (ColaFramework.NetWork.NetMessageCenter)o;
			ColaFramework.NetWork.NetMessageCenter.NetMessageAction arg0 = (ColaFramework.NetWork.NetMessageCenter.NetMessageAction)ToLua.CheckDelegate<ColaFramework.NetWork.NetMessageCenter.NetMessageAction>(L, 2);
			obj.OnMessage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnMessage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TimeSinceUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ColaFramework.NetWork.NetMessageCenter obj = (ColaFramework.NetWork.NetMessageCenter)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TimeSinceUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TimeSinceUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColaFramework_NetWork_NetMessageCenter_NetMessageAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<ColaFramework.NetWork.NetMessageCenter.NetMessageAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<ColaFramework.NetWork.NetMessageCenter.NetMessageAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

